version: "3.8"

services:
  traefik:
    image: traefik:v3.2
    security_opt:
      - no-new-privileges:true
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=tywen.kelly@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    user: "${UID:-1000}:${GID:-987}" # Use host user's UID and docker group GID
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
    networks:
      - traefik-public
    read_only: true
    tmpfs:
      - /tmp

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
      args:
        - VITE_API_BASE_URL=https://api.ultimatetictactoemmo.com
        - VITE_API_WS_BASE_URL=wss://api.ultimatetictactoemmo.com
        - NODE_ENV=${NODE_ENV:-production}
    security_opt:
      - no-new-privileges:true
    depends_on:
      - backend
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`ultimatetictactoemmo.com`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - traefik-public
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    security_opt:
      - no-new-privileges:true
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/postgres
      - RUST_LOG=${RUST_LOG:-info}
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.ultimatetictactoemmo.com`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - traefik-public
      - app-network
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp

  db:
    image: postgres:16-alpine
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=KN9BEd8YR7tcRDJ
      - POSTGRES_DB=postgres
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    user: "postgres:postgres"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/postgresql
      o: bind
  letsencrypt:
    driver: local
    driver_opts:
      type: none
      device: /var/lib/docker/letsencrypt
      o: bind

networks:
  app-network:
    driver: bridge
    internal: true
  traefik-public:
    external: false
